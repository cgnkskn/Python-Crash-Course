# -*- coding: utf-8 -*-
"""
Created on Wed Jan 29 01:54:08 2020

@author: Çağın
"""

# Chapter 8 

# Defining a Function 

def greet_user():
    """ Display a simple greeting."""
    print("Hello!")
greet_user()

def greet_user(usurname):
    """ Display a simple greeting."""
    print("Hello " + usurname.title() + "!")
greet_user("cagin")

def describe_pet(animal_type, pet_name):
    """Display information about pet."""
    print("\nI have a " + animal_type + ".")
    print("My " + animal_type + "'s name is "+ pet_name.title()+".")
describe_pet("hamster", "harry")
describe_pet('dog', 'willie')
describe_pet(pet_name = "harry", animal_type = "hamster")

def describe_pet(pet_name, animal_type='dog'):
    """Display information about a pet."""
    print("\nI have a " + animal_type + ".")
    print("My " + animal_type + "'s name is " + pet_name.title() + ".")
describe_pet(pet_name='willie')

# Return a Simple Value 

def get_formatteed_name(first_name, last_name):
    """Return a full name, neatly formatte.d"""
    full_name = first_name + " " + last_name
    return full_name.title()
musician = get_formatteed_name("jimi", "hendrix")   
print(musician)

def get_formatteed_name(first_name, middle_name, last_name):
    """Return a full name, neatly formatted."""
    full_name = first_name + " " + middle_name + " " + last_name
    return full_name.title()
musician = get_formatteed_name("john", "lee", "hooker")
print(musician)

def get_formatted_name(first_name, last_name, middle_name=''):
    """Return a full name, neatly formatted."""
    if middle_name:
        full_name = first_name + ' ' + middle_name + ' ' + last_name
    else:
        full_name = first_name + ' ' + last_name
    return full_name.title()

musician = get_formatted_name('jimi', 'hendrix')
print(musician)
musician = get_formatted_name('john', 'hooker', 'lee')
print(musician)

def build_person(first_name, last_name):
    """Return a dictionary of information about a person."""
    person = {"first": first_name, "last":last_name}
    return person
musician = build_person("jimi", "hendrix")
print(musician)

def build_person(first_name, last_name, age=''):
    """Return a dictionary of information about a person."""
    person = {'first': first_name, 'last': last_name}
    if age:
        person['age'] = age
        return person
musician = build_person('jimi', 'hendrix', age=27)
print(musician)

# Using a Function with a while loop

def get_formatted_name(first_name, last_name):
    """Return a full name, neatly formatted."""
    full_name = first_name + " " + last_name
    return full_name.title()

while True:
    print("\nPlease tell me your name:")
    print("(enter 'q' at any time to quit")
    
    f_name = input("First Name: ")
    if f_name == "q":
        break
    l_name = input("Last Name: ")
    if l_name == "q":
        break
    formatted_name = get_formatted_name(f_name, l_name)
    print("\nHello, " + formatted_name + "!")

# Passing a List

def greet_users(names):
    """Print a simple greeting to each user in the list."""
    for name in names:
        msg = "Hello, " + name.title() + "!"
        print(msg)

usernames = ["hannah", "ty", "margot"]
greet_users(usernames)

# Modifying a List a Function 

unprinted_designs = ["iphone case", "robot pendant", "dodecahedron"]
completed_models = []

while unprinted_designs:
    current_design = unprinted_designs.pop()
    print("Printing model: " + current_design)
    completed_models.append(current_design)

print("\nThe following models have been printed: ")
for completed_model in completed_models:
    print(completed_model)

def print_models(unprinted_designs, completed_models):
    """
    Simulate printing each design, until none are left.
    Move each design to completed_models after printing.
    """
    while unprinted_designs:
        current_design = unprinted_designs.pop()
        print("Printing model: " + current_design)
        completed_models.append(current_design)

def show_completed_models(completed_models):
    """Show all the models that were printed."""
    print("\nThe following models have been printed:")
    for completed_model in completed_models:
        print(completed_model)

print_models(unprinted_designs, completed_models)
show_completed_models(completed_models)

# The slice notation [:] makes a copy of the list to send to the function.
print_models(unprinted_designs[:], completed_models)

# Passing an Arbitrary Number of Arguments 

def make_pizza(*toppings):
    """Print the list of toppings that heve been requested."""
    print(toppings)
make_pizza("pepperoni")
make_pizza("mushrooms", "green peppers", "extra cheese")


def make_pizza(*toppings):
    """Summarize the pizza we are about to make."""
    print("\nMaking a pizza with the following toppings:")
    for topping in toppings:
        print("- " + topping)
make_pizza("pepperoni")
make_pizza("mushrooms, ""green pepers", "extra cheese" )

# Mixing Positional and Arbitrary Arguments

def make_pizza(size, *toppings):
    """Summarize th pizza we are about to make."""
    print("\nMaking a " + str(size)+
          "-inch pizza with the following toppings:" )
    for topping in toppings:
        print("- " + topping)
make_pizza(16, 'pepperoni')
make_pizza(12, "mushrooms", "green_peppers", "extra cheese")

# Using Arbitrary Keywords Arguments 

def build_profile(first, last, **user_info):
    """Build a dictionary containing everything we know about a user."""
    profile = {}
    profile["first_name"] = first
    profile["last_name"] = last
    for key, value in user_info.items():
        profile["key"] = value
    return profile
user_profile = build_profile("albert", "eisntein", location  = "princeton", 
                             field = "physics")
print(user_profile)

# Importing an Entire Module 

def make_pizza(size, *toppings):
    """Summarise the pizza we are about to make."""
    print("\nMaking a " + str(size) + 
          "-inch pizza with the following toppings:")
    for topping in toppings:
        print("- " + topping)

import pizza

pizza.make_pizza(16, 'pepperoni')
pizza.make_pizza(12, 'mushrooms', 'green peppers', 'extra cheese')

module_name.function_name()


# Importing Specific Function 

from module_name import function_name

from pizza import make_pizza
make_pizza(16, 'pepperoni')
make_pizza(12, 'mushrooms', 'green peppers', 'extra cheese')

# Using as to Give a Function an Alias

from pizza import make_pizza as mp

mp(16, 'pepperoni')
mp(12, 'mushrooms', 'green peppers', 'extra cheese')

from module_name import function_name as fn

# Using as to Give a Module an Alias

import pizza as p

p.make_pizza(16, 'pepperoni')
p.make_pizza(12, 'mushrooms', 'green peppers', 'extra cheese')

import module_name as mn

# Importing All Functions in a Module 

from pizza import *

make_pizza(16, 'pepperoni')
make_pizza(12, 'mushrooms', 'green peppers', 'extra cheese')

from module_name import *
