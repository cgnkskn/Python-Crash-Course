# -*- coding: utf-8 -*-
"""
Created on Thu Jan 30 00:22:43 2020

@author: Çağın
"""

# Chapter 10

import os
os.getcwd()

with open("pi_digits.txt") as file_object:
    contents = file_object.read()
    print(contents)
    
with open('pi_digits.txt') as file_object:
    contents = file_object.read()
    print(contents.rstrip())

# File Path
 
with open('text_files\filename.txt') as file_object: 

file_path = 'C:\Users\ehmatthes\other_files\text_files\filename.txt'
with open(file_path) as file_object:

# Reading Line by Line 
    
filename = "pi_digits.txt"

with open(filename) as file_object:
    for line in file_object:
        print(line.rstrip())

# Making a List of Lines from a File 
    
with open(filename) as file_object:
    lines = file_object.readlines()

for line in lines:
        print(line.rstrip())   
        
pi_string = " "
for line in lines:
    pi_string += line.rstrip()
print(pi_string)
print(len(pi_string))      
        
# If you work millions of data, print just first 52

pi_string = ''
for line in lines:
pi_string += line.strip()
print(pi_string[:52] + "...")
print(len(pi_string))        
        
# Is Your Birthday Contained in Pi ? 

filename = "pi_million_digits.txt"
with open(filename) as file_object:
    lines = file_object.readlines()

pi_string = " "
for line in lines:
    pi_string += line.rstrip()
            
birthday = input("Enter your birthday, in the form mmddyy: ")
if birthday in pi_string:
    print("Your birthday appears in the first million digits of pi")
else:
    print("Your birthday does not appear in the first million digits of pi.")
        
# Writing a File      
# read mode ('r'), write mode ('w'), append mode ('a')
filename = "programming.txt"
with open(filename, "w") as file_object:
    file_object.write("I love programming.")
        
# Writing Multiple Lines 

filename = 'programming.txt'
with open(filename, 'w') as file_object:
    file_object.write("I love programming.\n")
    file_object.write("I love creating new games.\n")    

# Appending to a File 
       
filename = 'programming.txt'
with open(filename, 'a') as file_object:
    file_object.write("I also love finding meaning in large datasets.\n")
    file_object.write("I love creating apps that can run in a browser.\n")       
       
# Exeptions 

print(5/0)    
try:
    print(5/0)
except ZeroDivisionError:
    print("You can't divide by zero!")    
    
    
print("Give me two numbers, and I'll divide them.")
print("Enter 'q' to quit.")
while True:
    first_number = input("\nFirst number: ")
    if first_number == 'q':
        break
    second_number = input("Second number: ")  
    try:
        answer = int(first_number) / int(second_number)
    except ZeroDivisionError:
        print("You can't divide by 0!")
    else:
        print(answer)   
    
filename = 'alice.txt'
with open(filename) as f_obj:
    contents = f_obj.read()    
    

try:
    with open(filename) as f_obj:
        contents = f_obj.read()    
except FileNotFoundError:
    msg = "Sorry, the file " + filename + " does not exist."
    print(msg)        
        
# Analyzing Text
    
title = "Alice in Wonderland"    
title.split()    
    
def count_words(filename):
    """Count the approximate number of words in a file."""
    try:
        with open(filename) as f_obj:
            contents = f_obj.read()
    except FileNotFoundError:
        msg = "Sorry, the file " + filename + " does not exist."
        print(msg)
    else:
        words = contents.split()
        num_words = len(words)
        print("The file " + filename + " has about " + str(num_words) +
              " words.")
filename = 'alice.txt'
count_words(filename)
    
    
filenames = ['alice.txt', 'siddhartha.txt', 'moby_dick.txt', 'little_women.txt']
for filename in filenames:
    count_words(filename)    
    
# Failing Silently
    
try:
    with open(filename) as f_obj:
            contents = f_obj.read()       
except FileNotFoundError:
    pass
else:    
    words = contents.split()
    num_words = len(words)
    print("The file " + filename + " has about " + str(num_words) +
              " words.")

# Storing Data 

# Using json.dump() and json.load()

import json    
numbers = [2, 3, 5, 7, 11, 13]    
filename = "numbers.json"
with open(filename, "w") as f_obj:
    json.dump(numbers, f_obj)    
    
with open(filename) as f_obj:
    numbers = json.load(f_obj)
print(numbers)

# Saving and Reading User-Generated Data

import json

username = input("What is your name")
filename = "username.json"
with open(filename, "w") as f_obj:
    json.dump(username, f_obj)
    print("We'll remember you when you come back, " + username + "!")

# Refactoring 
    
def greet_user():
    """Greet the user by name."""
    filename = 'username.json'
    try:
        with open(filename) as f_obj:
            username = json.load(f_obj)
    except FileNotFoundError:
        username = input("What is your name? ")
        with open(filename, 'w') as f_obj:
            json.dump(username, f_obj)
            print("We'll remember you when you come back, " + username + "!")
    else:
        print("Welcome back, " + username + "!")   
    
greet_user()

# Chapter 11

from name_function import get_formatted_name

print("Enter 'q' at any time to quit.")

while True:
    first = input("\nPlease give me a first name: ")
    if first == 'q':
        break
    last = input("Please give me a last name: ")
    if last == 'q':
        break

formatted_name = get_formatted_name(first, last)
print("\tNeatly formatted name: " + formatted_name + '.')

# A Passing Test 

import unittest
from name_function import get_formatted_name

class NamesTestCase(unittest.TestCase):
    """Tests for 'name_function.py'."""    
    def test_firt_last_name(self):
        """Do names like 'Janis Joplin' work"""
        formatted_name = get_formatted_name("janis", "joplin")
        self.assertEqual(formatted_name, "Janis Joplin")
unittest.main()

# Adding New Test  

import unittest
from name_function import get_formatted_name

class NamesTestCase(unittest.TestCase):
    """Tests for 'name_function.py'."""    
    def test_firt_last_name(self):
        """Do names like 'Janis Joplin' work"""
        formatted_name = get_formatted_name("janis", "joplin")
        self.assertEqual(formatted_name, "Janis Joplin")
    def test_first_last_middle_name(self):
        """Do names like 'Wolfgang Amadeus Mozart' work?"""
        formatted_name = get_formatted_name(
            'wolfgang', 'mozart', 'amadeus')
        self.assertEqual(formatted_name, 'Wolfgang Amadeus Mozart')
unittest.main()

# Testing a Class

        
